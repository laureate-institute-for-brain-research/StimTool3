) # ~ 2 min
fit.enet
coef.enet <- coef(fit.enet$finalModel, fit.enet$bestTune$lambda )[-1,]
sum(coef.enet!=0)
coef.enet[order(abs(coef.enet), decreasing=T)]
png('elnet_varimportance.png', 500, 1000)
plot(varImp(fit.enet), main='Elastic Net')
dev.off()
summary(fit.enet)
fid.enet
fit.enet
fit.enet$finalModel
varImp(fit.enet)
?count
library(plyr)
?count
rnorm(5, 3, 100)
rnorm(5, 100 3)
rnorm(5, 100, 3)
rnorm(100, 5, 3)
mean(rnorm(100, 5, 3))
mean(rnorm(100, 5, 3))
mean(rnorm(100, 5, 3))
mean(rnorm(100, 5, 3)^2)
mean(rnorm(100, 5, 3)^2)
mean(rnorm(100, 5, 3)^2)
mean(rnorm(100, 5, 3)^2)
mean(rnorm(100, 5, 3)^2)
mean(rnorm(100, 5, 10)^2)
mean(rnorm(100, 5, 10)^2)
mean(rnorm(100, 5, 10)^2)
mean(rnorm(100, 5, 10)^2)
setwd("T:/BehavioralTasks/StimTool/CueReactivity/media/meth/SelectedCuesFinal")
subjects_to_keep <- c("AL016", "AL473", "AL550", "AL914", "AM031", "AP299",
"AQ029", "AR005", "AR560", "AR868", "AT042", "AU922", "AV940", "AW653", "AW656",
"AW709", "AX387", "AX402", "AY394", "AZ007")
length(subjects_to_keep)
redcap_data <- read.csv('cue_rating_REDCAP_data.csv')
redcap_data <- redcap_data[redcap_data$record_id %in% subjects_to_keep,]
write.csv(redcap_data, 'cue_rating_REDCAP_data-filtered.csv', row.names = FALSE)
dim(redcap_data)
t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
t_result$p.value
round(t_result$p.value, digits = 3)
round(t_result$p.value, digits =2)
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
library(ggplot2)
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_desire_score', 'post_ddq_desire_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_desire_score', 'post_ddq_desire_score')])
library(reshape2)
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_desire_score', 'post_ddq_desire_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
library(reshape2)
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_desire_score', 'post_ddq_desire_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result$p.value, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
p
?ggsave
ggsave('desire.png', p)
t_result <- t.test(redcap_data$pre_ddq_desire_score, redcap_data$post_ddq_desire_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_desire_score', 'post_ddq_desire_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Desire p = ', round(t_result$p.value, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
ggsave('desire.png', p)
t_result <- t.test(redcap_data$pre_ddq_neg_score, redcap_data$post_ddq_neg_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_neg_score', 'post_ddq_neg_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Neg p = ', round(t_result$p.value, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
ggsave('neg.png', p)
t_result <- t.test(redcap_data$pre_ddq_controle_score, redcap_data$post_ddq_controle_score, paired = TRUE)
desire <- melt(redcap_data[, c('record_id', 'pre_ddq_controle_score', 'post_ddq_controle_score')])
p <- ggplot(desire) + geom_line(aes(x = variable, y = value, group = record_id, color = record_id)) +
ggtitle(paste('Control p = ', round(t_result$p.value, digits = 2))) + geom_point(aes(x = variable, y = value, group = record_id, color = record_id))
ggsave('control.png', p)
hist(redcap_data$post_ddq_desire_score)
png('post_desire.png')
hist(redcap_data$post_ddq_desire_score)
dev.off()
png('post_neg.png')
hist(redcap_data$post_ddq_neg_score)
dev.off()
png('post_control.png')
hist(redcap_data$post_ddq_control_score)
dev.off()
hist(redcap_data$post_ddq_neg_score)
hist(redcap_data$post_ddq_control_score)
png('post_control.png')
hist(redcap_data$post_ddq_controle_score)
dev.off()
library(reshape2)
long_data <- read.csv('meth_data6_withincompletes.csv', stringsAsFactors = FALSE)
long_data$text[long_data$text == '<p>After seeing this picture, please describe your mood, from negative to positive</p>'] <- 'valence'
long_data$text[long_data$text == '<p>After seeing this picture, please describe level of arousal, from calm to excited</p>'] <- 'arousal'
long_data$text[long_data$text == '<p>How much can this picture induce drug craving in an active methamphetamine user</p>'] <- 'craving'
long_data$text[long_data$text == '<p>How frequently does an active methamphetamine user see scenes like this image during his/her methamphetamine use?</p>'] <- 'typicality'
long_data$text[long_data$text == '<p>Is this picture related to methamphetamine and its use or not?</p>'] <- 'related'
long_data$response[long_data$response == 'NULL'] <- NA
long_data$response <- as.numeric(as.character(long_data$response))
long_data$file <- basename(long_data$url)
#plot individual subject responses by question number
#get rid of trailing spaces in subject IDs
long_data$subjectId <- substr(long_data$subjectId, 1, 5)
groupings <- read.table('image_categories.txt', header = TRUE)
long_data <- merge(groupings, long_data)
library(ggplot2)
library(gridExtra)
library(grid)
#exclude impossible valence/arousal responses
dim(long_data)
long_data <- long_data[!(long_data$text == 'valence' & !(long_data$response %in% 1:9)),]
dim(long_data)
long_data <- long_data[!(long_data$text == 'arousal' & !(long_data$response %in% 1:9)),]
dim(long_data)
long_data <- long_data[!(long_data$text == 'related' & !(long_data$response %in% 0:1)),]
dim(long_data)
for (subject in unique(long_data$subjectId)){
data_to_plot <- long_data[long_data$subjectId == subject,]
p1 <- ggplot(data = data_to_plot[data_to_plot$text == 'valence',]) +
#geom_line(aes(x = orderNum, y = response)) +
geom_point(aes(x = orderNum, y = response, color = group)) + ggtitle('valence')
p2 <- ggplot(data = data_to_plot[data_to_plot$text == 'arousal',]) +
#geom_line(aes(x = orderNum, y = response)) +
geom_point(aes(x = orderNum, y = response, color = group)) + ggtitle('arousal')
p3 <- ggplot(data = data_to_plot[data_to_plot$text == 'craving',]) +
#geom_line(aes(x = orderNum, y = response)) +
geom_point(aes(x = orderNum, y = response, color = group)) + ggtitle('craving')
p4 <- ggplot(data = data_to_plot[data_to_plot$text == 'typicality',]) +
#geom_line(aes(x = orderNum, y = response)) +
geom_point(aes(x = orderNum, y = response, color = group)) + ggtitle('typicality')
filename <- paste(subject, 'responses.png', sep = '_')
png(filename, width = 1400, height = 400)
grid.arrange(p1, p2, p3, p4, ncol = 4, top = textGrob(subject, gp=gpar(fontsize = 50)))
dev.off()
}
#exclude bad subjects
long_data <- long_data[!(long_data$subjectId %in% c('AV614', 'AN590', 'AS924')),]
longer_data <- melt(long_data, id.vars = c('subjectId', 'text', 'url', 'file'))
#extract just the file name
#longer_data$file <- basename(longer_data$url)
longer_data$value[longer_data$value == 'NULL'] <- NA
longer_data$value <- as.numeric(as.character(longer_data$value))
longer_data <- longer_data[longer_data$variable == 'response',]
#wide_data <- dcast(longer_data, formula = subjectId ~ text + file, value.var = 'value')
#mean_responses <- colMeans(wide_data[,names(wide_data) != 'subjectId'], na.rm = TRUE)
summary_values <- aggregate(longer_data[, c('value', 'text', 'file')], by = list(text = longer_data$text, file = longer_data$file),
FUN = mean, na.rm = TRUE)
summary_values <- summary_values[, 1:3]
wide_summary_values <- dcast(summary_values, formula = file ~ text)
write.csv(wide_summary_values, 'meth_data6_summary.csv', row.names=FALSE)
#make a summary file with the mean/sd of each measure to report in the supplement
mean_values <- aggregate(longer_data[, c('value', 'text', 'file')], by = list(text = longer_data$text, file = longer_data$file),
FUN = mean, na.rm = TRUE)
mean_values <- mean_values[, 1:3]
wide_mean_values <- dcast(mean_values, formula = file ~ text)
names(wide_mean_values) <- paste(names(wide_mean_values), 'mean', sep = '_')
sd_values <- aggregate(longer_data[, c('value', 'text', 'file')], by = list(text = longer_data$text, file = longer_data$file),
FUN = sd, na.rm = TRUE)
sd_values <- sd_values[, 1:3]
wide_sd_values <- dcast(sd_values, formula = file ~ text)
names(wide_sd_values) <- paste(names(wide_sd_values), 'sd', sep = '_')
wide_summary_values <- cbind(wide_mean_values, wide_sd_values)
names(wide_summary_values[1]) <- 'file'
wide_summary_values
hsv_data <- read.csv('MCR_hsv_values_sds.csv')
hsv_data
merge(hsv_data, wide_summary_values
)
names(hsv_data)
names(wide_summary_values)
names(wide_summary_values[1]) <- 'file'
names(wide_summary_values)
names(wide_summary_values)[1] <- 'file'
names(wide_summary_values)
all_data <- merge(wide_summary_values, hsv_data)
head(all_data)
dim(wide_summary_values)
dim(all_data)
13:18
write.csv(all_data[,c(1,2,8,3,9,4,10,5,11,6,12,13:18)], 'meth_cue_summary.csv', row.names=FALSE)
groupings <- read.table('image_categories.txt', header = TRUE)
groupings
groupings$group
groupings$category
groupings$description <- NA
groupings$description[groupings$group == 'control' & groupings$group == '0', 'description'] <- 'Neutral Objects'
groupings$description[groupings$group == 'control' & groupings$group == '1', 'description'] <- 'Neutral Objects with Hands'
groupings$description[groupings$group == 'control' & groupings$group == '2', 'description'] <- 'Neutral Tools'
groupings$description[groupings$group == 'control' & groupings$group == '3', 'description'] <- 'Neutral Tools with Hands, simple'
groupings$description[groupings$group == 'control' & groupings$group == '4', 'description'] <- 'Neutral Tools with Hands, complex'
groupings$description[groupings$group == 'control' & groupings$group == '5', 'description'] <- 'Neutral Tools with Faces'
groupings$description[groupings$group == 'drug' & groupings$group == '0', 'description'] <- 'Drug'
groupings$description[groupings$group == 'drug' & groupings$group == '1', 'description'] <- 'Drug and Hand'
groupings$description[groupings$group == 'drug' & groupings$group == '2', 'description'] <- 'Drug Instruments'
groupings$description[groupings$group == 'drug' & groupings$group == '3', 'description'] <- 'Drug Instruments and Hands'
groupings$description[groupings$group == 'drug' & groupings$group == '4', 'description'] <- 'Drug Injection and Hands'
groupings$description[groupings$group == 'drug' & groupings$group == '5', 'description'] <- 'Drug Activities and Faces'
groupings$description[groupings$group == 'drug' & groupings$group == 'x', 'description'] <- 'Drug Injection Instruments'
groupings
groupings$[groupings$group == 'control' & groupings$group == '0', 'description'] <- 'Neutral Objects'
groupings[groupings$group == 'control' & groupings$group == '0', 'description'] <- 'Neutral Objects'
groupings$description <- NA
groupings[groupings$group == 'control' & groupings$group == '0', 'description'] <- 'Neutral Objects'
groupings[groupings$group == 'control' & groupings$group == '1', 'description'] <- 'Neutral Objects with Hands'
groupings[groupings$group == 'control' & groupings$group == '2', 'description'] <- 'Neutral Tools'
groupings[groupings$group == 'control' & groupings$group == '3', 'description'] <- 'Neutral Tools with Hands, simple'
groupings[groupings$group == 'control' & groupings$group == '4', 'description'] <- 'Neutral Tools with Hands, complex'
groupings[groupings$group == 'control' & groupings$group == '5', 'description'] <- 'Neutral Tools with Faces'
groupings[groupings$group == 'drug' & groupings$group == '0', 'description'] <- 'Drug'
groupings[groupings$group == 'drug' & groupings$group == '1', 'description'] <- 'Drug and Hand'
groupings[groupings$group == 'drug' & groupings$group == '2', 'description'] <- 'Drug Instruments'
groupings[groupings$group == 'drug' & groupings$group == '3', 'description'] <- 'Drug Instruments and Hands'
groupings[groupings$group == 'drug' & groupings$group == '4', 'description'] <- 'Drug Injection and Hands'
groupings[groupings$group == 'drug' & groupings$group == '5', 'description'] <- 'Drug Activities and Faces'
groupings[groupings$group == 'drug' & groupings$group == 'x', 'description'] <- 'Drug Injection Instruments'
groupings
groupings$description <- NA
groupings[groupings$group == 'control' & groupings$category == '0', 'description'] <- 'Neutral Objects'
groupings[groupings$group == 'control' & groupings$category == '1', 'description'] <- 'Neutral Objects with Hands'
groupings[groupings$group == 'control' & groupings$category == '2', 'description'] <- 'Neutral Tools'
groupings[groupings$group == 'control' & groupings$category == '3', 'description'] <- 'Neutral Tools with Hands, simple'
groupings[groupings$group == 'control' & groupings$category == '4', 'description'] <- 'Neutral Tools with Hands, complex'
groupings[groupings$group == 'control' & groupings$category == '5', 'description'] <- 'Neutral Tools with Faces'
groupings[groupings$group == 'drug' & groupings$category == '0', 'description'] <- 'Drug'
groupings[groupings$group == 'drug' & groupings$category == '1', 'description'] <- 'Drug and Hand'
groupings[groupings$group == 'drug' & groupings$category == '2', 'description'] <- 'Drug Instruments'
groupings[groupings$group == 'drug' & groupings$category == '3', 'description'] <- 'Drug Instruments and Hands'
groupings[groupings$group == 'drug' & groupings$category == '4', 'description'] <- 'Drug Injection and Hands'
groupings[groupings$group == 'drug' & groupings$category == '5', 'description'] <- 'Drug Activities and Faces'
groupings[groupings$group == 'drug' & groupings$category == 'x', 'description'] <- 'Drug Injection Instruments'
groupings
all_data <- merge(groupings, all_data)
names(all_data)
dim(all_data)
names(all_data)
all_data$file_sd
write.csv(all_data[,c("file","description", "category", "group","valence_mean",   "valence_sd", "arousal_mean", "arousal_sd",
"craving_mean", "craving_sd", "related_mean", "related_sd", "typicality_mean","typicality_sd","hue_mean",
"hue_sd", "saturation_mean", "saturation_sd", "value_mean", "value_sd")], 'meth_cue_summary.csv', row.names=FALSE)
head(long_data)
head(longer_data)
merged_longer_data <- merge(longer_data, groupings)
head(merged_longer
)
head(merged_longer_data)
individual_mean_values <- aggregate(longer_data[, c('subjectID', 'value', 'text', 'description')], by = list(text = longer_data$text, description = longer_data$description,
subjectID = longer_data$subjectId), FUN = mean, na.rm = TRUE)
individual_mean_values <- aggregate(merged_longer_data[, c('subjectID', 'value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description, subjectID = merged_longer_data$subjectId),
FUN = mean, na.rm = TRUE)
names(merged_longer_data)
individual_mean_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description, subjectId = merged_longer_data$subjectId),
FUN = mean, na.rm = TRUE)
individual_mean_values
names(merged_longer_data)
individual_mean_values <- individual_mean_values[, c(1:3, 5)]
head(individual_mean_values)
wide_mean_values <- dcast(individual_mean_values, formula = subjectID + description ~ text)
wide_mean_values <- dcast(individual_mean_values, formula = subjectId + description ~ text)
wide_mean_values
individual_sd_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description, subjectId = merged_longer_data$subjectId),
FUN = sd, na.rm = TRUE)
individual_sd_values <- individual_sd_values[, c(1:3, 5)]
individual_wide_sd_values <- dcast(individual_sd_values, formula = subjectId + description ~ text)
names(individual_wide_sd_values) <- paste(names(individual_wide_sd_values), 'sd', sep = '_')
individual_wide_sd_values
names(individual_wide_mean_values)[1] <- 'subjectId'
merged_longer_data <- merge(longer_data, groupings)
individual_mean_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description, subjectId = merged_longer_data$subjectId),
FUN = mean, na.rm = TRUE)
individual_mean_values <- individual_mean_values[, c(1:3, 5)]
individual_wide_mean_values <- dcast(individual_mean_values, formula = subjectId + description ~ text)
names(individual_wide_mean_values) <- paste(names(individual_wide_mean_values), 'mean', sep = '_')
names(individual_wide_mean_values)[1] <- 'subjectId'
individual_sd_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description, subjectId = merged_longer_data$subjectId),
FUN = sd, na.rm = TRUE)
individual_sd_values <- individual_sd_values[, c(1:3, 5)]
individual_wide_sd_values <- dcast(individual_sd_values, formula = subjectId + description ~ text)
names(individual_wide_sd_values) <- paste(names(individual_wide_sd_values), 'sd', sep = '_')
names(individual_wide_sd_values)[1] <- 'subjectId'
individual_data <- merge(individual_wide_mean_values, individual_wide_sd_values)
individual_data
names(individual_wide_mean_values)[2] <- 'description'
names(individual_wide_sd_values)[2] <- 'description'
individual_data <- merge(individual_wide_mean_values, individual_wide_sd_values)
head(individual_data)
write.csv(individual_data, 'individual_category_by_ratings.csv', row.names = FALSE)
all_data
head(all_daa)
head(all_data)
overall_mean_values <- aggregate(merged_longer_data[, c('value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description),
FUN = mean, na.rm = TRUE)
warnings()
overall_mean_values
#also get just overall category means/sds
overall_mean_values <- aggregate(merged_longer_data[, c('value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description),
FUN = mean, na.rm = TRUE)
overall_mean_values <- overall_mean_values[, c(1:3)]
overall_wide_mean_values <- dcast(mean_values, formula = description ~ text)
names(overall_wide_mean_values) <- paste(names(overalla_wide_mean_values), 'mean', sep = '_')
names(overall_wide_mean_values)[1] <- 'description'
overall_mean_values <- aggregate(merged_longer_data[, c('value', 'text', 'description')], by = list(text = merged_longer_data$text,
description = merged_longer_data$description),
FUN = mean, na.rm = TRUE)
overall_mean_values <- overall_mean_values[, c(1:3)]
overall_wide_mean_values <- dcast(overall_mean_values, formula = description ~ text)
names(overall_wide_mean_values) <- paste(names(overall_wide_mean_values), 'mean', sep = '_')
names(overall_wide_mean_values)[1] <- 'description'
overall_wide_mean_values
all_data
aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
aggregate(all_data[, c('arousal_mean')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
, 'description'
aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_one <- aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
overall_mean_values
this_one <- this_one[,1:2]
this_one
names(all_data)
this_mean <- aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_mean <- this_mean[,1:2]
this_sd <- aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = sd, na.rm = TRUE)
this_sd <- this_sd[,1:2]
names(this_sd)[2] <- paste(names(this_sd)[2], '_sd', sep = '')
this_mean
this_sd
this_mean <- aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_mean <- this_mean[,1:2]
names(this_mean)[2] <- paste(names(this_mean)[2], '_mean', sep = '')
this_sd <- aggregate(all_data[, c('arousal_mean', 'description')], by = list(description = all_data$description), FUN = sd, na.rm = TRUE)
this_sd <- this_sd[,1:2]
names(this_sd)[2] <- paste(names(this_sd)[2], '_sd', sep = '')
all_category_summaries <- merge(this_mean, this_sd)
all_category_summaries
names(all_data)
for (i in c('arousal', 'craving', 'related', 'typicality', 'hue', 'saturation', 'value')){
this_mean <- aggregate(all_data[, c(paste(i, '_mean', sep = ''), 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_mean <- this_mean[,1:2]
names(this_mean)[2] <- paste(names(this_mean)[2], '_mean', sep = '')
this_sd <- aggregate(all_data[, c(paste(i, '_mean', sep = ''), 'description')], by = list(description = all_data$description), FUN = sd, na.rm = TRUE)
this_sd <- this_sd[,1:2]
names(this_sd)[2] <- paste(names(this_sd)[2], '_sd', sep = '')
all_category_summaries <- merge(this_mean, this_sd)
}
all_category_summaries
this_mean <- aggregate(all_data[, c('valence_mean', 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_mean <- this_mean[,1:2]
names(this_mean)[2] <- paste(names(this_mean)[2], '_mean', sep = '')
this_sd <- aggregate(all_data[, c('valence_mean', 'description')], by = list(description = all_data$description), FUN = sd, na.rm = TRUE)
this_sd <- this_sd[,1:2]
names(this_sd)[2] <- paste(names(this_sd)[2], '_sd', sep = '')
all_category_summaries <- merge(this_mean, this_sd)
for (i in c('arousal', 'craving', 'related', 'typicality', 'hue', 'saturation', 'value')){
this_mean <- aggregate(all_data[, c(paste(i, '_mean', sep = ''), 'description')], by = list(description = all_data$description), FUN = mean, na.rm = TRUE)
this_mean <- this_mean[,1:2]
names(this_mean)[2] <- paste(names(this_mean)[2], '_mean', sep = '')
this_sd <- aggregate(all_data[, c(paste(i, '_mean', sep = ''), 'description')], by = list(description = all_data$description), FUN = sd, na.rm = TRUE)
this_sd <- this_sd[,1:2]
names(this_sd)[2] <- paste(names(this_sd)[2], '_sd', sep = '')
all_category_summaries <- merge(all_category_summaries, this_mean)
all_category_summaries <- merge(all_category_summaries, this_sd)
}
all_category_summaries
write.csv(all_category_summaries, 'overall_category_stats.csv', row.names = FALSE)
ratings <- read.csv('meth_data5_summary.csv')
hsv <- read.csv('MCR_hsv_values.csv')
merged_data <- merge(ratings, hsv)
groupings <- read.table('image_categories.txt', header = TRUE)
merged_data <- merge(merged_data, groupings)
write.csv(merged_data, 'MCR_all_combined_predata.csv', row.names=FALSE)
hist(merged_data$value)
hist(merged_data$valence)
library(ggplot2)
library(gridExtra)
library(grid)
make_plotset <- function(data_to_plot, main_title, filename, group){
p1 <- ggplot(data_to_plot, aes_string(x = 'valence', fill = group)) +
geom_histogram(binwidth = 0.5, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p2 <- ggplot(data_to_plot, aes_string(x = 'arousal', fill = group)) +
geom_histogram(binwidth = 0.5, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p3 <- ggplot(data_to_plot, aes_string(x = 'craving', fill = group)) +
geom_histogram(binwidth = 10, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p4 <- ggplot(data_to_plot, aes_string(x = 'typicality', fill = group)) +
geom_histogram(binwidth = 10, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p5 <- ggplot(data_to_plot, aes_string(x = 'hue', fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p6 <- ggplot(data_to_plot, aes_string(x = 'saturation', fill = group)) +
geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity') + theme(legend.position="none")
p7 <- ggplot(data_to_plot, aes_string(x = 'value', fill = group)) + geom_histogram(binwidth = 0.1, alpha = 0.5, position = 'identity')
png(filename, width = 1400, height = 400)
grid.arrange(p1, p2, p3, p4, p5, p6, p7, ncol = 7, top = textGrob(main_title, gp=gpar(fontsize = 50)))
dev.off()
}
#plot histgrams including all images
make_plotset(merged_data, 'All Images', 'all_images.png', 'group')
#sort by craving--will select highest craving meth images and lowest craving controls
sorted_data <- merged_data[order(merged_data$craving),]
#will set to TRUE for images selected to be used
#this will be the 8 highest craving drug and lowest craving neutral images in each category
sorted_data$selected <- FALSE
#go forward, marking the first 8 in each category of control images for selection
names(sorted_data)
#number in each group that have been selected
number_selected <- c(0, 0, 0, 0, 0, 0)
for (i in 1:nrow(sorted_data)){
#x for injection instruments, category not used
if (sorted_data[i, 'category'] == 'x' | sorted_data[i, 'group'] == 'drug'){
next
}
this_category <- as.numeric(as.character(sorted_data[i, 'category'])) + 1
if (number_selected[this_category] > 7){
next
}
number_selected[this_category] <- number_selected[this_category] + 1
sorted_data[i, 'selected'] <- TRUE
}
#number in each group that have been selected
number_selected <- c(0, 0, 0, 0, 0, 0)
for (i in nrow(sorted_data):1){
#x for injection instruments, category not used
if (sorted_data[i, 'category'] == 'x' | sorted_data[i, 'group'] == 'control'){
next
}
this_category <- as.numeric(as.character(sorted_data[i, 'category'])) + 1
if (number_selected[this_category] > 7){
next
}
number_selected[this_category] <- number_selected[this_category] + 1
sorted_data[i, 'selected'] <- TRUE
}
selected_data <- sorted_data[sorted_data$selected,]
set.seed(123)
selected_data$in_set1 <- FALSE
#will randomize these
in_set1 <- c(FALSE, FALSE, FALSE, FALSE, TRUE, TRUE, TRUE, TRUE)
selected_data$category <- as.numeric(as.character(selected_data$category))
selected_data$category
for (i in 0:5){
selected_data[selected_data$category == i & selected_data$group == 'control', 'in_set1'] <- in_set1[sample(8)]
selected_data[selected_data$category == i & selected_data$group == 'drug', 'in_set1'] <- in_set1[sample(8)]
}
selected_data
dim(selected_data)
library(tableone)
control_tab <- CreateTableOne(vars = c('arousal', 'craving', 'typicality', 'valence', 'hue', 'saturation', 'value'),
strata = c('in_set1'), data = selected_data[selected_data$group == 'control',])
control_tab
drug_tab <- CreateTableOne(vars = c('arousal', 'craving', 'typicality', 'valence', 'hue', 'saturation', 'value'),
strata = c('in_set1'), data = selected_data[selected_data$group == 'drug',])
drug_tab
head(merged_longer_data)
individual_mean_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text')], by = list(text = merged_longer_data$text,
description = merged_longer_data$group, subjectId = merged_longer_data$subjectId),
FUN = mean, na.rm = TRUE)
individual_mean_values
individual_mean_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text')], by = list(text = merged_longer_data$text,
group = merged_longer_data$group, subjectId = merged_longer_data$subjectId),
FUN = mean, na.rm = TRUE)
indiviudal_mean_values
individual_mean_values
individual_mean_values <- individual_mean_values[, c(1:3, 5)]
individual_mean_values
individual_wide_mean_values <- dcast(individual_mean_values, formula = subjectId + group ~ text)
individual_wide_mean_values
names(individual_wide_mean_values) <- paste(names(individual_wide_mean_values), 'mean', sep = '_')
names(individual_wide_mean_values)[1] <- 'subjectId'
names(individual_wide_mean_values)[2] <- 'description'
individual_sd_values <- aggregate(merged_longer_data[, c('subjectId', 'value', 'text')], by = list(text = merged_longer_data$text,
group = merged_longer_data$group, subjectId = merged_longer_data$subjectId),
FUN = sd, na.rm = TRUE)
individual_sd_values
individual_sd_values <- individual_sd_values[, c(1:3, 5)]
individual_wide_sd_values <- dcast(individual_sd_values, formula = subjectId + group ~ text)
names(individual_wide_sd_values) <- paste(names(individual_wide_sd_values), 'sd', sep = '_')
names(individual_wide_sd_values)[1] <- 'subjectId'
names(individual_wide_sd_values)[2] <- 'description'
individual_overall_data <- merge(individual_wide_mean_values, individual_wide_sd_values)
individual_overall_data
individual_overall_data$description[individual_overall_data$description == 'drug'] <- 'Drug Overall'
individual_overall_data$description[individual_overall_data$description == 'control'] <- 'Control Overall'
individual_overall_data$description[individual_overall_data$description == 'drug'] <- 'Drug Overall'
individual_overall_data
individual_overall_data <- merge(individual_wide_mean_values, individual_wide_sd_values)
individual_overall_data$description
individual_overall_data$description <- as.character(individual_overall_data$description)
individual_overall_data$description[individual_overall_data$description == 'control'] <- 'Control Overall'
individual_overall_data$description[individual_overall_data$description == 'drug'] <- 'Drug Overall'
individual_overall_data$description
individual_data <- rbind(individual_data, individual_overall_data)
order(individual_data$subjectId)
individual_data$subjectId
order(individual_data$subjectId)
write.csv(individual_data[order(individual_data$subjectId),], 'individual_category_by_ratings.csv', row.names = FALSE)
individual_data$description[individual_data$description == 'Control Overall'] <- 'Neutral Overall'
write.csv(individual_data[order(individual_data$subjectId),], 'individual_category_by_ratings.csv', row.names = FALSE)
